const {
  getInitials,
  createSlug,
  average,
  isPalindrome,
  findPostById,
  addPost,
  removePost,
} = require("../assets/js/snacks.js");

// üèÜ Snack 1
// Creare un test che verifichi la seguente descrizione:
// üëâ "La funzione getInitials restituisce le iniziali di un nome completo."

test("La funzione getInitials restituisce le iniziali di un nome completo.", () => {
  expect(getInitials("Enea Sema")).toBe("E.S.");
  expect(getInitials("aurora sema")).toBe("A.S.");
  expect(getInitials("Lupo  Nero")).toBe("L.N.");
});

// üèÜ Snack 2
// Creare un test che verifichi la seguente descrizione:
// üëâ "La funzione createSlug restituisce una stringa in lowercase."

test("La funzione createSlug restituisce una stringa in lowercase.", () => {
  expect(createSlug("Titolo Molto Bello")).toBe("titolo-molto-bello");
});

// üèÜ Snack 3
// Creare un test che verifichi la seguente descrizione:
// üëâ "La funzione average calcola la media aritmetica di un array di numeri."

test("La funzione average calcola la media aritmetica di un array di numeri.", () => {
  expect(average([1, 2, 3])).toBe(2);
});

// üèÜ Snack 4
// Creare un test che verifichi la seguente descrizione:
// üëâ "La funzione createSlug sostituisce gli spazi con -."

// üìå Esempi:
// createSlug("Questo √® un test") ‚Üí "questo-e-un-test"

test("La funzione createSlug sostituisce gli spazi con -.", () => {
  expect(createSlug("Titolo molto bello")).toBe("titolo-molto-bello");
});

// üèÜ Snack 5
// Creare un test che verifichi la seguente descrizione:
// üëâ "La funzione isPalindrome verifica se una stringa √® un palindromo."

// üìå Nota: una stringa palindroma √® una sequenza di caratteri che si legge uguale sia da sinistra a destra che da destra a sinistra.

test("La funzione isPalindrome verifica se una stringa √® un palindromo.", () => {
  expect(isPalindrome(`otto`)).toBeTruthy();
  expect(isPalindrome(`lupo`)).toBeFalsy();
});

// üèÜ Snack 6
// Creare un test che verifichi la seguente descrizione:
// üëâ "La funzione createSlug lancia un errore se il titolo √® vuoto o non valido."

test("La funzione createSlug lancia un errore se il titolo √® vuoto o non valido.", () => {
  expect(() => createSlug("")).toThrow("Titolo vuoto o non valido");
  expect(() => createSlug(null)).toThrow("Titolo vuoto o non valido");
});

// üèÜ Snack 7
// Crea un array di oggetti posts, in cui ogni oggetto ha le propriet√† id, title e slug.
// Creare un test che verifichi le seguenti descrizioni:
// üëâ "La funzione findPostById restituisce il post corretto dato l‚Äôarray di post e l‚Äôid"

let posts;

beforeEach(() => {
  posts = [
    {
      id: 0,
      title: "title10",
      slug: "slug1",
    },
    {
      id: 1,
      title: "title 20",
      slug: "slug-2",
    },
    {
      id: 2,
      title: "title-30",
      slug: "slug 3",
    },
  ];
});

// afetrEach(()=>{
//   posts =[]
// })
//  non serve per esercizio

test(`La funzione findPostById restituisce il post corretto dato l‚Äôarray di post e l‚Äôid`, () => {
  expect(findPostById(posts, 1)).toEqual({
    id: 1,
    title: "title 20",
    slug: "slug-2",
  });
  expect(() => findPostById(posts, `ciao`)).toThrow(`ciao non √® un id`);
  expect(() => findPostById([6, 9], 1)).toThrow(
    `Errore di ricerca! L'array posts non √® nel formato corretto`
  );
  expect(findPostById(posts, 4)).toBe(null);
});

// üèÜ Challenge: describe() - organizzazione dei test
// Organizza i test in describe() raggruppandoli per argomento.

// üéØ Snack 8 (Bonus)
// Creare due test che verifichino le seguenti descrizioni:
// üëâ "Dopo aver aggiunto un post con la funzione addPost, l'array posts deve contenere un elemento in pi√π."
// üëâ "Dopo aver rimosso un post con la funzione removePost, l'array posts deve contenere un elemento in meno."

// üìå Note:
// Si consiglia di resettare l'array di post dopo ogni test. Ti ricordi come si fa?

test("Dopo aver aggiunto un post con la funzione addPost, l'array posts deve contenere un elemento in pi√π.", () => {
  addPost(posts, { id: 3, title: "ABC", slug: "abcdef" });
  expect(posts).toHaveLength(4);
});

test("Dopo aver rimosso un post con la funzione removePost, l'array posts deve contenere un elemento in meno.", () => {
  removePost(posts, 2);
  expect(posts).toHaveLength(2);
});

// üéØ Snack 9 (Bonus)
// Creare un test che verifichi la seguente descrizione:
// üëâ "Se si tenta di aggiungere un post con un id o uno slug gi√† esistente, la funzione addPost deve lanciare un errore."

// üìå Nota:
// Gli errori devono essere chiari e distinti, es. "Slug gi√† esistente" e ‚ÄúId gi√† esistente‚Äù.

test("Se si tenta di aggiungere un post con un id o uno slug gi√† esistente, la funzione addPost deve lanciare un errore.", () => {
  expect(() =>
    addPost(posts, {
      id: 1,
      title: "title 25",
      slug: "slug-24",
    })
  ).toThrow(`Id gi√† presente`);
  expect(() =>
    addPost(posts, {
      id: 3,
      title: "title 25",
      slug: "slug-2",
    })
  ).toThrow(`Slug gi√† presente`);
});
